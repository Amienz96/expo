{"version":3,"file":"ModalContext.js","sourceRoot":"","sources":["../../src/modal/ModalContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import type { NavigationProp, ParamListBase } from '@react-navigation/native';\nimport { nanoid } from 'nanoid/non-secure';\nimport {\n  createContext,\n  use,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type PropsWithChildren,\n} from 'react';\nimport { StyleSheet } from 'react-native';\nimport { ScreenStack, ScreenStackItem } from 'react-native-screens';\n\nimport { ModalComponent } from './ModalComponent';\n\nexport interface ModalConfig {\n  component: React.ReactNode;\n  parentNavigationProp: NavigationProp<ParamListBase>;\n  uniqueId: string;\n}\n\nexport interface ModalContextType {\n  modalConfigs: ModalConfig[];\n  openModal: (config: ModalConfig) => void;\n  closeModal: (id: string) => void;\n  addEventListener: (type: 'close', callback: (id: string) => void) => () => void;\n}\n\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const ModalContextProvider = ({ children }: PropsWithChildren) => {\n  const [modalConfigs, setModalConfigs] = useState<ModalConfig[]>([]);\n  const eventListeners = useRef<Set<(id: string) => void>>(new Set());\n  const prevModalConfigs = useRef<ModalConfig[]>([]);\n\n  useEffect(() => {\n    if (prevModalConfigs.current !== modalConfigs) {\n      prevModalConfigs.current.forEach((config) => {\n        if (!modalConfigs.find((c) => c.uniqueId === config.uniqueId)) {\n          eventListeners.current.forEach((callback) => callback(config.uniqueId));\n        }\n      });\n      prevModalConfigs.current = modalConfigs;\n    }\n  }, [modalConfigs]);\n\n  const openModal = useCallback(\n    (config: ModalConfig) => setModalConfigs((prev) => [...prev, config]),\n    []\n  );\n\n  const emitCloseEvent = useCallback((id: string) => {\n    eventListeners.current.forEach((callback) => callback(id));\n  }, []);\n\n  const closeModal = useCallback((id: string) => {\n    console.log(`Closing modal with id: ${id}`);\n    setModalConfigs((prev) => {\n      const modalIndex = prev.findIndex((config) => config.uniqueId === id);\n      if (modalIndex >= 0) {\n        return prev.filter((_, index) => index < modalIndex);\n      }\n      return prev;\n    });\n  }, []);\n\n  const addEventListener = useCallback((type: 'close', callback: (id: string) => void) => {\n    if (type !== 'close') return () => {};\n\n    if (!callback) {\n      console.warn('Passing undefined as a callback to addEventListener is forbidden');\n      return () => {};\n    }\n\n    eventListeners.current.add(callback);\n\n    return () => {\n      eventListeners.current.delete(callback);\n    };\n  }, []);\n\n  const rootId = useMemo(() => nanoid(), []);\n\n  return (\n    <ScreenStack style={{ flex: 1 }}>\n      <ScreenStackItem\n        screenId={rootId}\n        activityState={2}\n        style={StyleSheet.absoluteFill}\n        headerConfig={{\n          hidden: true,\n        }}>\n        <ModalContext.Provider\n          value={{\n            modalConfigs,\n            openModal,\n            closeModal,\n            addEventListener,\n          }}>\n          {children}\n        </ModalContext.Provider>\n      </ScreenStackItem>\n      {modalConfigs.map((config) => (\n        <ScreenStackItem\n          key={config.uniqueId}\n          screenId={`${rootId}${config.uniqueId}`}\n          activityState={2}\n          stackPresentation=\"modal\"\n          style={StyleSheet.absoluteFill}\n          onWillDisappear={() => {\n            closeModal(config.uniqueId);\n          }}\n          onDisappear={() => {\n            emitCloseEvent(config.uniqueId);\n          }}>\n          <ModalComponent modalConfig={config} />\n        </ScreenStackItem>\n      ))}\n    </ScreenStack>\n  );\n};\n\nexport const useModalContext = () => {\n  const context = use(ModalContext);\n  if (!context) {\n    throw new Error('useModalContext must be used within a ModalContextProvider');\n  }\n  return context;\n};\n"]}