{"version":3,"file":"Modal.js","sourceRoot":"","sources":["../../src/modal/Modal.tsx"],"names":[],"mappings":";;AAcA,sBAgCC;AA5CD,kDAA2C;AAC3C,iCAA4C;AAE5C,iDAAiD;AACjD,oDAAiD;AAQjD,SAAgB,KAAK,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAc;IAC9D,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,IAAA,8BAAe,GAAE,CAAC;IACtE,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAC;IAC3E,MAAM,UAAU,GAAG,IAAA,6BAAa,GAA4C,CAAC;IAC7E,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,OAAO,EAAE,CAAC;YACZ,MAAM,KAAK,GAAG,IAAA,mBAAM,GAAE,CAAC;YACvB,SAAS,CAAC;gBACR,SAAS,EAAE,QAAQ;gBACnB,QAAQ,EAAE,KAAK;gBACf,cAAc,EAAE,UAAU;aAC3B,CAAC,CAAC;YACH,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;aAAM,CAAC;YACN,IAAI,cAAc,EAAE,CAAC;gBACnB,UAAU,CAAC,cAAc,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QACD,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACd,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,cAAc,EAAE,CAAC;YACnB,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;gBACtC,IAAI,EAAE,KAAK,cAAc,EAAE,CAAC;oBAC1B,OAAO,EAAE,EAAE,CAAC;oBACZ,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QACD,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC,EAAE,CAAC,cAAc,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { type ParamListBase } from '@react-navigation/native';\nimport type { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { nanoid } from 'nanoid/non-secure';\nimport { useEffect, useState } from 'react';\n\nimport { useModalContext } from './ModalContext';\nimport { useNavigation } from '../useNavigation';\n\nexport interface ModalProps {\n  children: React.ReactNode;\n  visible: boolean;\n  onClose?: () => void;\n}\n\nexport function Modal({ children, visible, onClose }: ModalProps) {\n  const { openModal, closeModal, addEventListener } = useModalContext();\n  const [currentModalId, setCurrentModalId] = useState<string | undefined>();\n  const navigation = useNavigation<NativeStackNavigationProp<ParamListBase>>();\n  useEffect(() => {\n    if (visible) {\n      const newId = nanoid();\n      openModal({\n        component: children,\n        uniqueId: newId,\n        navigationProp: navigation,\n      });\n      setCurrentModalId(newId);\n    } else {\n      if (currentModalId) {\n        closeModal(currentModalId);\n      }\n    }\n    return () => {};\n  }, [visible]);\n  useEffect(() => {\n    if (currentModalId) {\n      return addEventListener('close', (id) => {\n        if (id === currentModalId) {\n          onClose?.();\n          setCurrentModalId(undefined);\n        }\n      });\n    }\n    return () => {};\n  }, [currentModalId, addEventListener, onClose]);\n  return null;\n}\n"]}