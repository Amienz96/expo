{"version":3,"file":"ModalComponent.js","sourceRoot":"","sources":["../../src/modal/ModalComponent.tsx"],"names":[],"mappings":";;AAQA,wCA2BC;AAnCD,qDAA6D;AAE7D,iCAA2C;AAC3C,+CAAoC;AAEpC,iDAAiD;AACjD,oDAAiD;AAEjD,SAAgB,cAAc,CAAC,EAC7B,KAAK,GACyD;IAC9D,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,GAAG,IAAA,8BAAe,GAAE,CAAC;IACvD,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAE,CAAC;IACnC,MAAM,EAAE,GAAI,KAAK,CAAC,MAAyB,CAAC,EAAE,CAAC;IAC/C,MAAM,WAAW,GAAG,IAAA,eAAO,EACzB,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC,EAC3D,CAAC,YAAY,EAAE,EAAE,CAAC,CACnB,CAAC;IACF,MAAM,SAAS,GAAG,WAAW,EAAE,SAAS,CAAC;IACzC,MAAM,cAAc,GAAG,WAAW,EAAE,cAAc,CAAC;IAEnD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,OAAO,UAAU,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,EAAE;YACjD,UAAU,CAAC,EAAE,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,IAAI,cAAc,EAAE,CAAC;QACnB,OAAO,CACL,CAAC,0BAAiB,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC,CACvC;QAAA,CAAC,mBAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,mBAAI,CAC7C;MAAA,EAAE,0BAAiB,CAAC,CACrB,CAAC;IACJ,CAAC;IACD,OAAO,CAAC,mBAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,mBAAI,CAAC,CAAC;AACtD,CAAC","sourcesContent":["import { NavigationContext } from '@react-navigation/native';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { useEffect, useMemo } from 'react';\nimport { View } from 'react-native';\n\nimport { useModalContext } from './ModalContext';\nimport { useNavigation } from '../useNavigation';\n\nexport function ModalComponent({\n  route,\n}: NativeStackScreenProps<{ __internal__modal: { id: string } }>) {\n  const { modalConfigs, closeModal } = useModalContext();\n  const navigation = useNavigation();\n  const id = (route.params as { id: string }).id;\n  const modalConfig = useMemo(\n    () => modalConfigs.find((config) => config.uniqueId === id),\n    [modalConfigs, id]\n  );\n  const component = modalConfig?.component;\n  const navigationProp = modalConfig?.navigationProp;\n\n  useEffect(() => {\n    return navigation.addListener('beforeRemove', () => {\n      closeModal(id);\n    });\n  }, [navigation]);\n\n  if (navigationProp) {\n    return (\n      <NavigationContext value={navigationProp}>\n        <View style={{ flex: 1 }}>{component}</View>\n      </NavigationContext>\n    );\n  }\n  return <View style={{ flex: 1 }}>{component}</View>;\n}\n"]}