{"version":3,"file":"ModalStack.js","sourceRoot":"","sources":["../../src/layouts/ModalStack.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  ParamListBase,\n  StackNavigationState,\n  StackRouter,\n  useNavigationBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport { NativeStackNavigationOptions, NativeStackView } from '@react-navigation/native-stack';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport { Drawer } from 'vaul';\n\nimport { withLayoutContext } from './withLayoutContext';\nimport modalStyles from '../../assets/modal.module.css';\n\n/** Extend NativeStackNavigationOptions with extra sheet/detent props */\ntype ModalStackNavigationOptions = NativeStackNavigationOptions & {\n  presentation?: 'modal' | 'formSheet' | 'containedModal' | 'card' | 'fullScreenModal';\n  sheetAllowedDetents?: (number | string)[];\n  sheetInitialDetentIndex?: number;\n  sheetGrabberVisible?: boolean;\n  /** Largest detent index that remains undimmed (matches iOS). Accepts numeric index, 'none', or 'last'. */\n  sheetLargestUndimmedDetentIndex?: number | 'none' | 'last';\n  /** Override the corner radius (px) applied to the top of the drawer sheet. */\n  sheetCornerRadius?: number;\n};\n\ntype Props = {\n  initialRouteName?: string;\n  screenOptions?: ModalStackNavigationOptions;\n  children: React.ReactNode;\n};\n\nfunction ModalStackNavigator({ initialRouteName, children, screenOptions }: Props) {\n  const { state, navigation, descriptors, NavigationContent, describe } = useNavigationBuilder(\n    StackRouter,\n    {\n      children,\n      screenOptions,\n      initialRouteName,\n    }\n  );\n\n  return (\n    <NavigationContent>\n      <ModalStackView\n        state={state}\n        navigation={navigation}\n        descriptors={descriptors}\n        describe={describe}\n      />\n    </NavigationContent>\n  );\n}\n\nfunction ModalStackView({\n  state,\n  navigation,\n  descriptors,\n  describe,\n}: {\n  state: StackNavigationState<ParamListBase>;\n  navigation: any;\n  descriptors: Record<\n    string,\n    {\n      navigation: any;\n      route: any;\n      options: ModalStackNavigationOptions;\n      render: () => React.ReactNode;\n    }\n  >;\n  describe: any;\n}) {\n  const isWeb = Platform.OS === 'web';\n  const { colors } = useTheme();\n\n  const nonModalRoutes = state.routes.filter((route) => {\n    const { presentation } = descriptors[route.key].options || {};\n    const isModalType =\n      presentation === 'modal' ||\n      presentation === 'formSheet' ||\n      presentation === 'fullScreenModal' ||\n      presentation === 'containedModal';\n    return !(isWeb && isModalType);\n  });\n\n  let nonModalIndex = nonModalRoutes.findIndex((r) => r.key === state.routes[state.index]?.key);\n  if (nonModalIndex < 0) nonModalIndex = nonModalRoutes.length - 1;\n\n  const newStackState = { ...state, routes: nonModalRoutes, index: nonModalIndex };\n\n  return (\n    <div style={{ flex: 1, display: 'flex' }}>\n      <NativeStackView\n        state={newStackState}\n        navigation={navigation}\n        descriptors={descriptors as any}\n        describe={describe}\n      />\n      {isWeb &&\n        state.routes.map((route, i) => {\n          const { presentation } = descriptors[route.key].options || {};\n          const isModalType =\n            presentation === 'modal' ||\n            presentation === 'formSheet' ||\n            presentation === 'fullScreenModal' ||\n            presentation === 'containedModal';\n          const isActive = i === state.index && isModalType;\n          if (!isActive) return null;\n\n          return (\n            <RouteDrawer\n              key={route.key}\n              routeKey={route.key}\n              options={descriptors[route.key].options as ModalStackNavigationOptions}\n              renderScreen={descriptors[route.key].render}\n              onDismiss={() => navigation.goBack()}\n              themeColors={colors}\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nconst createModalStack = createNavigatorFactory(ModalStackNavigator);\nconst RouterModal = withLayoutContext(createModalStack().Navigator);\n\nexport { RouterModal };\n\n// Internal helper component\n\nfunction RouteDrawer({\n  routeKey,\n  options,\n  renderScreen,\n  onDismiss,\n  themeColors,\n}: {\n  routeKey: string;\n  options: ModalStackNavigationOptions;\n  renderScreen: () => React.ReactNode;\n  onDismiss: () => void;\n  themeColors: { card: string; background: string };\n}) {\n  const [open, setOpen] = React.useState(true);\n  // Resolve snap points logic.\n  const allowed = options.sheetAllowedDetents;\n\n  const isArrayDetents = Array.isArray(allowed);\n  const useCustomSnapPoints = isArrayDetents && !(allowed.length === 1 && allowed[0] === 1);\n\n  const snapPoints: (number | string)[] | undefined = useCustomSnapPoints\n    ? (allowed as (number | string)[])\n    : undefined;\n\n  const [snap, setSnap] = React.useState<number | string | null>(\n    useCustomSnapPoints && isArrayDetents ? allowed[0] : 1\n  );\n\n  // Map react-native-screens ios sheet undimmed logic to Vaul's fadeFromIndex\n  const fadeFromIndex =\n    options.presentation === 'formSheet'\n      ? options.sheetLargestUndimmedDetentIndex === 'last'\n        ? (snapPoints?.length ?? 0)\n        : typeof options.sheetLargestUndimmedDetentIndex === 'number'\n          ? options.sheetLargestUndimmedDetentIndex + 1\n          : 0\n      : 0;\n\n  // Merge provided contentStyle with defaults\n  const baseContentStyle: React.CSSProperties =\n    options.contentStyle &&\n    typeof options.contentStyle === 'object' &&\n    !Array.isArray(options.contentStyle)\n      ? (options.contentStyle as React.CSSProperties)\n      : {};\n\n  const mergedContentStyle: React.CSSProperties = {\n    backgroundColor: themeColors.background,\n    ...baseContentStyle,\n    ...(options.sheetCornerRadius != null ? { borderRadius: options.sheetCornerRadius } : {}),\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    if (!open) onDismiss();\n  };\n\n  return (\n    <Drawer.Root\n      key={routeKey}\n      open={open}\n      snapPoints={snapPoints as unknown as (number | string)[]}\n      activeSnapPoint={snap}\n      setActiveSnapPoint={setSnap}\n      shouldScaleBackground={options.presentation !== 'formSheet'}\n      fadeFromIndex={fadeFromIndex}\n      dismissible={options.gestureEnabled ?? true}\n      onAnimationEnd={handleOpenChange}\n      onOpenChange={setOpen}>\n      <Drawer.Portal>\n        <Drawer.Overlay\n          style={{ position: 'fixed', inset: 0, backgroundColor: 'rgba(0,0,0,0.4)' }}\n        />\n        <Drawer.Content className={modalStyles.drawerContent} style={{ pointerEvents: 'none' }}>\n          <div\n            className={modalStyles.modal}\n            data-presentation={options.presentation}\n            style={mergedContentStyle}>\n            {options.sheetGrabberVisible && (\n              <div className={modalStyles.grabberRow}>\n                <div className={modalStyles.grabber} />\n              </div>\n            )}\n            <div className={modalStyles.modalBody}>{renderScreen()}</div>\n          </div>\n        </Drawer.Content>\n      </Drawer.Portal>\n    </Drawer.Root>\n  );\n}\n"]}