{"version":3,"file":"meter-processor.web.js","sourceRoot":"","sources":["../src/meter-processor.web.ts"],"names":[],"mappings":"AAAA,qBAAqB;AAErB,MAAM,cAAe,SAAQ,qBAAqB;IAChD;QACE,KAAK,EAAE,CAAC;QACR,mCAAmC;QACnC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAClB,CAAC;IAED,OAAO,CAAC,MAAM,CAAC,0BAA0B;QACvC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;YACtB,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,yCAAyC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACxC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnB,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC;YACD,mDAAmD;YACnD,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE,CAAC;gBACvB,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;gBACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAClB,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC,CAAC,2BAA2B;IAC1C,CAAC;CACF;AAED,iBAAiB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC","sourcesContent":["// meter-processor.js\n\nclass MeterProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    // Accumulators for RMS calculation\n    this._sum = 0;\n    this._count = 0;\n  }\n\n  process(inputs /*, outputs, parameters */) {\n    const input = inputs[0];\n    if (input && input[0]) {\n      const channel = input[0];\n      // Accumulate square‚Äêsum and sample count\n      for (let i = 0; i < channel.length; i++) {\n        const s = channel[i];\n        this._sum += s * s;\n        this._count++;\n      }\n      // Every 128 samples, compute and post an RMS value\n      if (this._count >= 128) {\n        const rms = Math.sqrt(this._sum / this._count);\n        this.port.postMessage(rms);\n        this._sum = 0;\n        this._count = 0;\n      }\n    }\n    return true; // keep the processor alive\n  }\n}\n\nregisterProcessor('meter-processor', MeterProcessor);\n"]}